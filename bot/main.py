import asyncio
import aiohttp
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º main.py –Ω–∞–ø—Ä—è–º—É—é
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import Router
from datetime import datetime

from config.config import TELEGRAM_BOT_TOKEN, CHAT_ID, CHECK_INTERVAL_MINUTES
from bot.services.binance import fetch_trading_pairs, get_crypto_price
from bot.services.notification import NotificationService
from bot.services.logger_service import LoggerService
from bot.utils.logger import setup_logger

logger = setup_logger()

notification_service = NotificationService()
logger_service = LoggerService()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
def register_handlers(dp: Dispatcher):
    dp.include_router(router)

@router.message(Command("status"))
async def cmd_status(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞: –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Binance –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
    """
    logger.info("Status command received.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å Binance
    async with aiohttp.ClientSession() as session:
        test_symbol = "BTCUSDT"
        price = await get_crypto_price(session, test_symbol)
        if price is not None:
            binance_status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞"
        else:
            binance_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
    tracked_coins_count = len(notification_service.tracked_prices)

    status_message = (
        "üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*\n\n"
        f"üåê –°–≤—è–∑—å —Å Binance: {binance_status}\n"
        f"ü™ô –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç: *{tracked_coins_count}*\n"
    )

    await message.answer(status_message, parse_mode="Markdown")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    logger.info("Help command received.")
    
    help_text = (
        "üìò *–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞*\n\n"
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ –±–∏—Ä–∂–µ Binance –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
        "–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        "üìä *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏*:\n"
        "üîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –≤ –ø–∞—Ä–µ —Å USDT\n"
        "üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã —Å –æ–±—ä–µ–º–æ–º > $2,000,000 –∑–∞ 24 —á–∞—Å–∞)\n"
        "üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç\n"
        "üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ 2% –∏ –±–æ–ª–µ–µ\n"
        "üîπ –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç–µ –∑–∞ —Å—É—Ç–∫–∏\n"
        "üîπ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤ Telegram –∏ –∏—Ö –æ—á–∏—Å—Ç–∫–∞\n\n"
        "üìà *–§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*:\n"
        "–ö–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç:\n"
        "- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–†–æ—Å—Ç / –ü–∞–¥–µ–Ω–∏–µ)\n"
        "- –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)\n"
        "- –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã\n"
        "- –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–π –º–æ–Ω–µ—Ç–µ –∑–∞ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
        "```\n"
        "–†–æ—Å—Ç —Ü–µ–Ω—ã –Ω–∞ *BTCUSDT*\n"
        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ: *+2.50%*\n"
        "–í—Ä–µ–º—è: *2025-04-05 14:30:22*\n"
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: *3*\n"
        "```\n\n"
        "üõ† *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*:\n"
        "- `/status` ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Binance –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç)\n"
        "- `/help` ‚Äî –í—ã–≤–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üïí *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏*:\n"
        "- –í –ø–æ–ª–Ω–æ—á—å —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –º–æ–Ω–µ—Ç–∞–º\n"
        "- –õ–æ–≥–∏ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram –∏ —Ñ–∞–π–ª –æ—á–∏—â–∞–µ—Ç—Å—è\n\n"
        "‚ÑπÔ∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ. –í—Å–µ –º–æ–Ω–µ—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
    )
    
    await message.answer(help_text, parse_mode="Markdown")

async def check_prices(bot: Bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω"""
    async with aiohttp.ClientSession() as session:
        while True:
            logger.info("Fetching USDT trading pairs...")
            symbols = await fetch_trading_pairs(session)

            logger.info(f"Checking prices for {len(symbols)} pairs...")
            for symbol in symbols:
                price = await get_crypto_price(session, symbol)
                if price is None:
                    continue
                change = notification_service.check_price_change(symbol, price)
                if change is not None and abs(change) >= 2:
                    await notification_service.send_notification(bot, symbol, change)
                notification_service.update_price(symbol, price)
            await asyncio.sleep(CHECK_INTERVAL_MINUTES * 60)

async def send_daily_logs(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤ —á–∞—Ç –∏ –∏—Ö –æ—á–∏—Å—Ç–∫–∞"""
    while True:
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
        logger.info("Sending daily logs to chat.")
        await logger_service.send_log_file(bot)

async def reset_notifications_count():
    """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–æ–ª–Ω–æ—á—å"""
    while True:
        now = datetime.now()
        seconds_until_midnight = ((24 - now.hour - 1) * 3600 + (60 - now.minute - 1) * 60 + (60 - now.second))
        await asyncio.sleep(seconds_until_midnight)
        notification_service.notifications_count.clear()
        logger.info("Daily notification counters reset.")

async def main():
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    dp = Dispatcher()

    register_handlers(dp)

    asyncio.create_task(check_prices(bot))
    asyncio.create_task(send_daily_logs(bot))
    asyncio.create_task(reset_notifications_count())

    logger.info("Bot started.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
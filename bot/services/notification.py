import asyncio
from datetime import datetime, date
from aiogram import Bot
from bot.utils.logger import setup_logger
from config.config import CHAT_ID

logger = setup_logger()

class NotificationService:
    def __init__(self):
        self.tracked_prices = {}
        self.notifications_count = {}  # {symbol: {'count': int, 'last_reset': date}}

    async def send_notification(self, bot: Bot, symbol: str, change_percent: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        now = datetime.now()
        today = now.date()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –º–æ–Ω–µ—Ç—ã, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        if symbol not in self.notifications_count:
            self.notifications_count[symbol] = {'count': 0, 'last_reset': None}

        symbol_data = self.notifications_count[symbol]

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è
        if symbol_data['last_reset'] != today:
            symbol_data['count'] = 0
            symbol_data['last_reset'] = today

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        symbol_data['count'] += 1

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ü–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if change_percent > 0:
            direction = "üìà –†–æ—Å—Ç"
            change_text = f"+{change_percent:.2f}%"
            emoji = "üü¢"
        else:
            direction = "üìâ –ü–∞–¥–µ–Ω–∏–µ"
            change_text = f"{change_percent:.2f}%"
            emoji = "üî¥"

        time_str = now.strftime("%Y-%m-%d %H:%M:%S")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown
        message = (
            f"**{direction} —Ü–µ–Ω—ã –Ω–∞ `{symbol}`**\n\n"
            f"{emoji} **–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** *{change_text}*\n"
            f"üìÖ **–í—Ä–µ–º—è:** *{time_str}*\n"
            f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è:** *{symbol_data['count']}*\n"
        )

        try:
            await asyncio.sleep(1)
            await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
            logger.info(f"Sent notification for {symbol}: {change_text} ({symbol_data['count']} times today)")
        except Exception as e:
            logger.error(f"Failed to send notification for {symbol}: {e}")

    def update_price(self, symbol, price):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä–µ"""
        self.tracked_prices[symbol] = price
        logger.debug(f"Updated price for {symbol}: {price}")

    def check_price_change(self, symbol, new_price):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        old_price = self.tracked_prices.get(symbol)
        if old_price is None or old_price == 0:
            return None
        change_percent = ((new_price - old_price) / old_price) * 100
        return round(change_percent, 2)
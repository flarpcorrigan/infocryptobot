# main.py
import logging
import aiohttp
import asyncio
from datetime import datetime
from telegram.ext import Application, CommandHandler, ContextTypes

import config
import utils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="logs/bot.log",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    encoding="utf-8"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_prices = {}
hourly_movers = []

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")

async def online(update, context):
    await update.message.reply_text("üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def help_command(update, context):
    message = """
üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/online ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/help ‚Äî –°–ø—Ä–∞–≤–∫–∞
/blacklist ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö:
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ ‚â•1.5%
- –ö–∞–∂–¥—ã–π —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç TOP 5 –º–æ–Ω–µ—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏ —Ü–µ–Ω—ã

üîß –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:
- –ú–æ–Ω–µ—Ç—ã –±–µ–∑ –ø–∞—Ä—ã USDT –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /blacklist, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫
"""
    await update.message.reply_text(message, parse_mode='HTML')

async def blacklist_command(update, context):
    blacklist = utils.load_blacklist()
    if not blacklist:
        await update.message.reply_text("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return
    
    message = "üóëÔ∏è <b>–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç:</b>\n\n"
    for symbol in blacklist:
        message += f"‚Ä¢ <code>{symbol.upper()}</code>\n"
    
    await update.message.reply_text(message, parse_mode='HTML')

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω ---
async def check_price_changes(context: ContextTypes.DEFAULT_TYPE):
    global last_prices
    try:
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã...")
        
        async with aiohttp.ClientSession() as session:
            coins = await utils.get_top_300_coins(session)
            valid_coins = await utils.filter_valid_coins(session, coins)
            
            current_movers = []
            for coin in valid_coins:
                symbol = coin["symbol"]
                current_price = await utils.get_price_change(session, symbol)

                if current_price == 0:
                    continue

                if symbol in last_prices:
                    change_percent = ((current_price - last_prices[symbol]) / last_prices[symbol]) * 100
                    current_movers.append({
                        "symbol": symbol,
                        "change": change_percent,
                        "timestamp": datetime.now().timestamp()
                    })

                    if abs(change_percent) >= config.PRICE_CHANGE_THRESHOLD:
                        direction = "üìà –†–æ—Å—Ç" if change_percent > 0 else "üìâ –ü–∞–¥–µ–Ω–∏–µ"
                        message = utils.format_alert_message(
                            symbol.upper(),
                            direction,
                            round(abs(change_percent), 2)
                        )
                        await context.bot.send_message(
                            chat_id=config.TELEGRAM_CHAT_ID,
                            text=message,
                            parse_mode='HTML'
                        )
                
                last_prices[symbol] = current_price

            global hourly_movers
            hourly_movers.extend(current_movers)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {e}")

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ø–∞ ---
async def generate_hourly_top(context: ContextTypes.DEFAULT_TYPE):
    global hourly_movers
    try:
        one_hour_ago = datetime.now().timestamp() - 60 * 60
        filtered_movers = [m for m in hourly_movers if m['timestamp'] >= one_hour_ago]
        
        if filtered_movers:
            top_message = utils.format_top_movers_message(filtered_movers)
            await context.bot.send_message(
                chat_id=config.TELEGRAM_CHAT_ID,
                text=top_message,
                parse_mode='HTML'
            )
        
        hourly_movers = []  # –û—á–∏—â–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ø–∞: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    from telegram.ext import Application

    if config.TELEGRAM_BOT_TOKEN.startswith("YOUR_TELEGRAM_"):
        raise ValueError("‚ùå –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å TELEGRAM_BOT_TOKEN –≤ config.py –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!")

    app = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("online", online))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("blacklist", blacklist_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
    job_queue = app.job_queue
    job_queue.run_repeating(check_price_changes, interval=config.CHECK_INTERVAL_MINUTES * 60, first=10)
    job_queue.run_repeating(generate_hourly_top, interval=config.HOURLY_INTERVAL_MINUTES * 60, first=60)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω...")
    app.run_polling(drop_pending_updates=True)
# handlers.py
import config
import utils
from datetime import datetime, timezone
import logging
import pytz
import aiohttp

logger = logging.getLogger(__name__)


async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")


async def online(update, context):
    await update.message.reply_text("üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")


async def help_command(update, context):
    message = """
üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/online ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/help ‚Äî –°–ø—Ä–∞–≤–∫–∞
/status ‚Äî –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/ping ‚Äî –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
/blacklist ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö:
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ ‚â•1.5%
- –ö–∞–∂–¥—ã–π —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç TOP 5 –º–æ–Ω–µ—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏ —Ü–µ–Ω—ã

üîß –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:
- –ú–æ–Ω–µ—Ç—ã –±–µ–∑ –ø–∞—Ä—ã USDT –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /blacklist, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫
"""
    await update.message.reply_text(message, parse_mode="HTML")


async def blacklist_command(update, context):
    blacklist = utils.load_blacklist()
    if not blacklist:
        await update.message.reply_text("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    message = "üóëÔ∏è <b>–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç:</b>\n\n"
    for symbol in blacklist:
        message += f"‚Ä¢ <code>{symbol.upper()}</code>\n"

    await update.message.reply_text(message, parse_mode="HTML")


async def status_command(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"""
    try:
        from utils import last_prices, hourly_movers, last_check_time

        monitored_coins = list(last_prices.keys())
        ignored_coins = utils.load_blacklist()
        check_time_str = (
            utils.format_time(last_check_time) if last_check_time else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        )

        top_movers = hourly_movers
        top_str = (
            "\n".join(
                [
                    f"{i+1}. {move['symbol'].upper()}: {abs(move['change']):.2f}%"
                    for i, move in enumerate(
                        sorted(
                            top_movers, key=lambda x: abs(x["change"]), reverse=True
                        )[:5]
                    )
                ]
            )
            if top_movers
            else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        )

        message = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω: <code>{check_time_str}</code>
‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –º–æ–Ω–µ—Ç—ã: <code>{len(monitored_coins)}</code>
üóëÔ∏è –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: <code>{len(ignored_coins)}</code>
üî• –¢–æ–ø 5 –¥–≤–∏–∂–µ–Ω–∏–π:
{top_str}
"""
        await update.message.reply_text(message, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /status: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")


async def ping_command(update, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Binance –∏ CoinGecko"""
    try:
        async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Binance
            binance_ping = None
            try:
                async with session.get(f"{config.BINANCE_API_URL}/time", timeout=10) as r:
                    if r.status == 200:
                        server_time = (await r.json())["serverTime"] / 1000
                        binance_time = datetime.fromtimestamp(server_time, tz=timezone.utc)
                        binance_ping = f"üü¢ Binance: {utils.format_time(binance_time)}"
                    else:
                        binance_ping = f"üî¥ Binance: {r.status}"
            except Exception as e:
                binance_ping = f"üî¥ Binance: {str(e)}"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CoinGecko (—Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
            coingecko_ping = None
            try:
                url = " https://api.coingecko.com/api/v3/coins/markets "
                params = {"vs_currency": "usd", "per_page": 1}
                async with session.get(url, params=params, timeout=10) as r:
                    if r.status == 200:
                        data = await r.json()
                        if isinstance(data, list) and len(data) > 0:
                            coingecko_ping = "üü¢ CoinGecko: –¥–æ—Å—Ç—É–ø–µ–Ω"
                        else:
                            coingecko_ping = "üî¥ CoinGecko: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
                    else:
                        coingecko_ping = f"üî¥ CoinGecko: {r.status}"
            except Exception as e:
                coingecko_ping = f"üî¥ CoinGecko: {str(e)}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            message = f"""
üì° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</b>

{binance_ping}
{coingecko_ping}

üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {utils.get_local_time_str()}
"""
            await update.message.reply_text(message, parse_mode='HTML')
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /ping: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.")
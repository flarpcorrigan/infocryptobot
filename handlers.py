# handlers.py
import config
import utils
from datetime import datetime, timezone
import logging
import pytz

logger = logging.getLogger(__name__)

async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")

async def online(update, context):
    await update.message.reply_text("üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def help_command(update, context):
    message = """
üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/online ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/help ‚Äî –°–ø—Ä–∞–≤–∫–∞
/status ‚Äî –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/blacklist ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö:
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ ‚â•1.5%
- –ö–∞–∂–¥—ã–π —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç TOP 5 –º–æ–Ω–µ—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏ —Ü–µ–Ω—ã

üîß –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:
- –ú–æ–Ω–µ—Ç—ã –±–µ–∑ –ø–∞—Ä—ã USDT –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /blacklist, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫
"""
    await update.message.reply_text(message, parse_mode='HTML')

async def blacklist_command(update, context):
    blacklist = utils.load_blacklist()
    if not blacklist:
        await update.message.reply_text("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    message = "üóëÔ∏è <b>–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç:</b>\n\n"
    for symbol in blacklist:
        message += f"‚Ä¢ <code>{symbol.upper()}</code>\n"
    
    await update.message.reply_text(message, parse_mode='HTML')

async def status_command(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"""
    try:
        monitored_coins = list(utils.last_prices.keys())
        ignored_coins = utils.load_blacklist()
        last_check = utils.last_check_time
        check_time_str = utils.format_time(last_check) if last_check else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        top_movers = sorted(utils.hourly_movers, key=lambda x: abs(x["change"]), reverse=True)[:5]
        top_str = "\n".join([
            f"{i+1}. {move['symbol'].upper()}: {abs(move['change']):.2f}%"
            for i, move in enumerate(top_movers)
        ]) if top_movers else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        message = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: <code>{check_time_str}</code>
‚úÖ –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –º–æ–Ω–µ—Ç—ã: <code>{len(monitored_coins)}</code>
üóëÔ∏è –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: <code>{len(ignored_coins)}</code>
üî• –¢–æ–ø 5 –¥–≤–∏–∂–µ–Ω–∏–π:
{top_str or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}
"""
        await update.message.reply_text(message, parse_mode='HTML')
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /status: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")
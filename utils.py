# utils.py
import config
import aiohttp
import logging
import json
from datetime import datetime, timedelta
import aiohttp
import asyncio
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="logs/bot.log",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    encoding="utf-8"
)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä Binance
_cached_binance_pairs = set()
_last_exchange_info_time = 0
EXCHANGE_INFO_TTL = 600  # 10 –º–∏–Ω—É—Ç

async def get_binance_pairs(session):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä USDT —Å Binance —á–µ—Ä–µ–∑ /exchangeInfo"""
    global _cached_binance_pairs, _last_exchange_info_time

    current_time = datetime.now().timestamp()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –∞–∫—Ç—É–∞–ª–µ–Ω
    if current_time - _last_exchange_info_time < EXCHANGE_INFO_TTL and _cached_binance_pairs:
        return _cached_binance_pairs

    try:
        for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
            url = f"{config.BINANCE_API_URL}/exchangeInfo"
            async with session.get(url, timeout=15) as response:
                if response.status == 429:
                    retry_after = int(response.headers.get("Retry-After", 60))
                    logging.warning(f"Too Many Requests. –ñ–¥—É {retry_after} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(retry_after)
                    continue
                
                if response.status == 200:
                    data = await response.json()
                    if isinstance(data, dict) and "symbols" in data:
                        _cached_binance_pairs = {s["symbol"] for s in data["symbols"]}
                        _last_exchange_info_time = current_time
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –≤ —Ñ–∞–π–ª
                        with open("data/binance_pairs.json", "w", encoding="utf-8") as f:
                            json.dump(list(_cached_binance_pairs), f, ensure_ascii=False, indent=2)
                        return _cached_binance_pairs
                    else:
                        logging.warning("–û—à–∏–±–∫–∞: –≤ –æ—Ç–≤–µ—Ç–µ Binance –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'symbols'")
                        return load_binance_cache()
                
                else:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è exchangeInfo: {response.status}")
                    return load_binance_cache()
        
        return load_binance_cache()
    
    except asyncio.TimeoutError:
        logging.error("–û—à–∏–±–∫–∞: —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Binance")
        return load_binance_cache()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä —Å Binance: {e}")
        return load_binance_cache()

def load_binance_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä—ã –∏–∑ –∫—ç—à-—Ñ–∞–π–ª–∞"""
    try:
        with open("data/binance_pairs.json", "r", encoding="utf-8") as f:
            return set(json.load(f))
    except Exception:
        return set()

def save_blacklist(blacklist):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç"""
    with open("data/blacklist.json", "w", encoding="utf-8") as f:
        json.dump(list(blacklist), f, ensure_ascii=False, indent=2)

def load_blacklist():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç"""
    try:
        with open("data/blacklist.json", "r", encoding="utf-8") as f:
            return set(json.load(f))
    except Exception:
        return set()

async def get_top_300_coins(session):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-300 –º–æ–Ω–µ—Ç —Å CoinGecko"""
    coins = []
    try:
        for page in range(1, 4):  # 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 100 –º–æ–Ω–µ—Ç
            url = f"{config.COINGECKO_API_URL}/coins/markets"
            params = {"vs_currency": "usd", "per_page": 100, "page": 1}
            
            logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ CoinGecko (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})")
            for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
                try:
                    async with session.get(url, params=params, timeout=15) as response:
                        if response.status == 429:
                            retry_after = int(response.headers.get("Retry-After", 20))
                            logging.warning(f"Too Many Requests. –ñ–¥—É {retry_after} —Å–µ–∫—É–Ω–¥...")
                            await asyncio.sleep(retry_after)
                            continue
                        
                        if response.status == 200:
                            data = await response.json()
                            coins.extend([{"id": coin["id"], "symbol": coin["symbol"]} for coin in data])
                            break  # –£—Å–ø–µ—à–Ω–æ
                        else:
                            logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}): {response.status}")
                            break
                    
                    await asyncio.sleep(20)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                
                except (aiohttp.ClientError, asyncio.TimeoutError) as e:
                    logging.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/3): {e}")
                    await asyncio.sleep(5)
                    continue
        
        return coins
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-300 –º–æ–Ω–µ—Ç: {e}")
        return []

async def filter_valid_coins(session, coins):
    """–§–∏–ª—å—Ç—Ä –º–æ–Ω–µ—Ç —Å –ø–∞—Ä–æ–π USDT –Ω–∞ Binance"""
    blacklist = load_blacklist()
    valid_coins = []
    new_ignored = set()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—ã Binance
    symbols = await get_binance_pairs(session)
    
    for coin in coins:
        symbol = coin["symbol"].lower()
        
        if symbol in ["usdt", "usdc", "busd"] or symbol in blacklist:
            continue
        
        pair = f"{symbol.upper()}USDT"
        if pair in symbols:
            valid_coins.append(coin)
        else:
            new_ignored.add(symbol)
            logging.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—É {symbol} ‚Äî –Ω–µ—Ç –ø–∞—Ä—ã {pair}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if new_ignored:
        blacklist.update(new_ignored)
        save_blacklist(blacklist)
    
    return valid_coins

async def get_price_change(session, symbol):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å Binance"""
    try:
        url = f"{config.BINANCE_API_URL}/ticker/price"
        params = {"symbol": f"{symbol.upper()}USDT"}
        
        async with session.get(url, params=params, timeout=10) as response:
            if response.status == 429:
                retry_after = int(response.headers.get("Retry-After", 10))
                logging.warning(f"Too Many Requests. –ñ–¥—É {retry_after} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(retry_after)
                return 0
            
            if response.status == 200:
                data = await response.json()
                return float(data["price"])
            else:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {response.status}")
                return 0
    
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        logging.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {e}")
        return 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return 0

def format_alert_message(symbol, direction, percent):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
    emoji = "üü¢" if direction == "üìà –†–æ—Å—Ç" else "üî¥"
    return f"""
{emoji} <b>{direction} —Ü–µ–Ω—ã –Ω–∞ {symbol.upper()}!</b>
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{percent:.2f}%</b>
üïí –í—Ä–µ–º—è: {datetime.now().strftime("%Y-%m-%d %H:%M")}
"""

def format_top_movers_message(movers):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø-5 –º–æ–Ω–µ—Ç"""
    if not movers:
        return "üìâ –ù–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –∑–∞ —á–∞—Å."
    
    message = "üî• <b>–¢–æ–ø 5 –¥–≤–∏–∂–µ–Ω–∏–π –∑–∞ —á–∞—Å:</b>\n\n"
    movers_sorted = sorted(movers, key=lambda x: abs(x['change']), reverse=True)[:5]
    
    for i, move in enumerate(movers_sorted, 1):
        emoji = "üü¢" if move['change'] > 0 else "üî¥"
        message += f"{i}. {emoji} <b>{move['symbol'].upper()}</b>: <code>{abs(move['change']):.2f}%</code>\n"
    
    message += f"\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    return message